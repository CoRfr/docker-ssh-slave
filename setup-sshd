#!/bin/bash

set -eux
set -o pipefail

# Get default Jenkins User
DEFAULT_UID="$(ls -nd ${JENKINS_AGENT_HOME} | awk '{print $3}')"
DEFAULT_USER="$(grep ${DEFAULT_UID} /etc/passwd | cut -f1 -d':')"
SOCKET_GROUP="docker"

# Get Socket group membership
SOCKET_GID="$(ls -n /var/run/docker.sock | awk '{print $4}')"

# If do not have already the docker group with the socker gid membership,
if [ ! "$(grep ${SOCKET_GID} /etc/group | grep ${SOCKET_GROUP})" ]
then
  # Do we already have a group with this GID to use ?
  if [ "$(grep :${SOCKET_GID}: /etc/group)" ]
  then
    SOCKET_GROUP="$(grep :${SOCKET_GID}: /etc/group | cut -d':' -f1)"
  else
    # Nope. Create a new dummy group then
    SOCKET_GROUP="docker-dummy"
    addgroup --gid "${SOCKET_GID}" "${SOCKET_GROUP}"
  fi
fi

# Add the Default User to the socket group
addgroup "${DEFAULT_USER}" "${SOCKET_GROUP}"

write_key() {
	mkdir -p "${JENKINS_AGENT_HOME}/.ssh"
	echo "$1" > "${JENKINS_AGENT_HOME}/.ssh/authorized_keys"
	chown -Rf jenkins:jenkins "${JENKINS_AGENT_HOME}/.ssh"
	chmod 0700 -R "${JENKINS_AGENT_HOME}/.ssh"
}

set +u

if [[ ${JENKINS_SLAVE_SSH_PUBKEY} == ssh-* ]]; then
  write_key "${JENKINS_SLAVE_SSH_PUBKEY}"
fi
if [[ $# -gt 0 ]]; then
  if [[ $1 == ssh-* ]]; then
    write_key "$1"
    shift 1
  else
    exec "$@"
  fi
fi


# ensure variables passed to docker container are also exposed to ssh sessions
env | grep _ >> /etc/environment

ssh-keygen -A
exec /usr/sbin/sshd -D -e "${@}"
